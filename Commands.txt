Setting up username and email globally for all users on a specific machine
================================================================

git config –global user.name “sai krishna”
git config –global user.email “intelliqittrainings@gmail.com”

To see the list of configurations on git
git config –global –list

==============================================================================
Local Repository is the location where version controlling happens and
files present here are called as Commited files

1 To initilise the current folder as a git repo
  git init
  Note: This will create a hidden folder called as .git which stores all
  the configuration necessary for git to run.

2 To send a file from working dir to stagging area
  git add filename
  To send multiple files to stagging area
  git add file1 file2 file3
  To send all the files and folders into the stagging area
  git add .
  Note  . represents present working directory

3 To remove files from the stagging area and bring them back to 
  untracked section
  git rm --cached filename
  (or)
  git reset filename

4 To send the files from the stagging area to the local repository
  git commit -m "Some Message"

5 To see the status of the files present in the untracked and stagging areas
  git status

6 To see the commit history of the local repository
  git log
  To see the commit history in short format
  git log --oneline
  
  .gitignore
==============
This is a special configuration file which is sued for hiding
private files from git.Any file whose name is mentioned in 
.gitignore become unaccesble by git

Uploading the code into github(Checkin)
==============================================
1 Signin int github.com
2 Click on + on TopRight corner
3 Click on New Repository
4 Enter some reposiotry name--->Select Public or Private
5 Click on Create repository
6 Go to "push an exisiting reposiotry from command line"
  Copy and paste the fitst command
  This will create a link between the local and the remote repository
  git remote add origin https://github.com/abhilashdev/GITCommands.git
7 To upload the code
  git push -u origin master
  git push -u origin --all
  Enter username and password of github

Downloading the code from github
================================================
This can be done in 3 ways
1 git clone
2 git fetch
3 git pull

Downloading the code from the github
===========================================
This can be done in 3 ways
1 git clone
2 git fetch
3 git pull

git clone
===========
This will download all the code from the remote github into the local machine irresepective of whether that code is present on our machine or not.This is generally one time activity where a copy of the code has to be copied to all the team members machine

Syntax:
git clone remote_git_hub_url

git fetch
===============
This will download only the modified files and place them on a seperate branch called as remote branch.We can go into this remote branch and check if the modifications are ok or not,If they are acceptable then we merge it with the master branch.

1 Open github.com
2 Go to the repository that we uploaded
3 Select some file—>Click on Edit
4 Make some changes to the files
5 Click on Commit changes
6 Open gitbash
git fetch
This will download only the modified files but it will not be visible on master.Instead it create a remote branch where these changes can be seen
7 To see the list of all branches local and remote
git branch -a
8 Move into that remote branch
git checkout remotes/origin/master
9 View the changes and if they are acceptable merge it with master
git checkout master
git merge remotes/origin/master

git pull
=============
This will download only the modified files but it will merge them directly with the master branch

1 Open github.com
2 Go to the repository that we uploaded
3 Select some file—>Click on Edit
4 Make some changes to the files
5 Click on Commit changes
6 Open gitbash
git pull
Now the modified files can be see directly on the master


Git Merging
=================
Merging of a branch always happens based on the time stamp of the commits.

Not a latest version

a -> b->c ->D ->E
master: a,b,E
Child:C,D (latest code)

Git Rebasing
==================
This is also called fast forward merge and here the commits coming from a branch will projected as the top most commits on the master branch.
 
a -> b ->E ->c ->D
master: a,b,E
Child:C,D (latest)

Rebase test with master
git checkout test
git rebase master
git checkout master
git merge test

Git cherry pick
=====================
Both git merge and git rebase bring all the commits from a branch into the master branch.If we want to selectively pick up only certain commits and add them to the master branch then we can use cherry pick.
=======

1 Create a commit on master
touch f1
git add .
git commit -m “a”

2 Check the commit history
git log –oneline

3 Create a new branch and create few commits
touch f2
git add .
git commit -m “b”
touch f3
git add .
git commit -m “c”
touch f4
git add .
git commit -m “d”
touch f5
git add .
git commit -m “e”

4 Check the commit history
git log –oneline

5 To cherry pick only c and e commits to master
git checkout master


Git Reset
===============
This is process of toggling between mutiple commits
Git stores the code in the form of multiple versions
and it allows us to jum between any version depending
on requirement

Reset can be done in 3 ways
1 Hard reset
2 Soft Reset
3 Mixed reset

Hard Reset
==============
Here the HEAD will point to an older commit and we will be able
see the data as it was present at the time of the older commit

1 Create a file and store some data
  vim file1
  Go into insert mode by pressing i
  Add a word "one"
  To save and quit  Esc :wq Enter

2 Send this file into stagging and local repository
  git add .
  git commit -m "a"

3 Open the same file1 and make some more changes
  vim file1
  one
  two
  Save and quit

4 Send this file into stagging and local repository
  git add .
  git commit -m "b"

5 Open the same file and add some more data
  vim file1
  one
  two
  three
  Save and quit

6 Send this file into stagging and local repository
  git add .
  git commit -m "c"

7 Check the commit history
  git log --oneline

8 To hard reset from c to b commit
  git reset --HARD b_commitid

9 Open the file1 and we should see the data as it was present at b commit
  cat file1

=========================================================================
Soft reset
============
This will take the repository one step back it if we reset from c to b 
commit then HEAD will point to b commit but the files will be shown as they 
are present in the stagging area.ie the status of git just before the c commit happened

git reset --soft b_commitid

Mixed Reset
================
This will take the repository two steps back it if we reset from c to b 
commit then HEAD will point to b commit but the files will be shown as they 
are present in the untracked/modified area.

git reset --mixed b_commitid


Git Stash
===============
This is a section og git where we can store the files
and once files are stored in this section further of
git cannot touch those files until they are unstashed

This is generally used to store unfinished or semi finished
work and continue with some other functionality code.

1 To stash all the files present in the stagging area
  git stash 

2 To stash all the files present in the stagging area and untracked section
  git stash -u

3 To stash all the files present in the stagging area,untracked section and   also the .gitignore file
  git stash -a

4 To see the list of stashes
  git stash list

5 To unstash the lastest stash
  git stash pop

6 To unstash an older stash
  git stash pop stash@{stashno}

.gitignore is a hidden file of git which is used for storing
the name of private/secret files.Any file whose name is mentioned
in .gitignore remains unaccessable by git.But .gitignore itself
can be accesed by git,which means .gitignore moves into the stagging
area,local reposiotry and the remote git repository

To prevent this and make .gitignore hidden from git
git stash -a

=============================================================

Git Tags
==============
This is used for placing bookmarks on important commits
This is genrally done to identify important commits relates
to release activities

Tags are clasified into 2 types
1 Light weight Tags
2 Annited Tags

1 To create a light weight tag
  git tag tag_name
  Note: Tags are bydefault created by the latest commit

2 To create tag for an older commit
  git tag tag_name older_commitid

3 To create an annoted tag
  git tag -a tag_name -m "some message"
  This is also by default created for the top most commit

4 To create an annoted tag for an older commit
  git tag -a tag_name -m "some message" older_commit_id

5 To see the list of all the tags
  git tag

6 To push the tags into the remote git repository
  git push --tags

7 To delete a tag from the local machine
  git tag -d tag_name

8 To delete a tag from the github repository
  git push origin  :tagname

9 To see the annoted tag message and info
   git show tag_name
